20. Valid Parentheses

Easy

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

My Solution:

class Solution {
public:
    bool isValid(string s) {
        
        string brackets = "";
        bool valid = true;
        for(int i = 0; i < s.length(); i++){
            switch(s[i]) {
                case '(':
                    brackets.append("(");
                    break;

                case '{':
                    brackets.append("{");
                    break;

                case '[':
                    brackets.append("[");
                    break;

                case ')':
                    std::cout << ")" << std::endl;
                    if(brackets.back() == '('){
                        brackets.pop_back();
                    } else {
                        valid = false;
                        goto exitloop;
                    }
                    break;

                case '}':
                    if(brackets.back() == '{'){
                        brackets.pop_back();
                    } else {
                        valid = false;
                        goto exitloop;
                    }
                    break;

                case ']':
                    if(brackets.back() == '['){
                        brackets.pop_back();
                    } else {
                        valid = false;
                        goto exitloop;
                    }
                    break;

            }
        } exitloop:

        if(brackets.length() > 0){
            valid = false;
        }

        return(valid);

    }
};