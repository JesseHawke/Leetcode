70. Climbing Stairs

Easy

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45

First recusive solution (time complexity O(2^n)) (times out):

class Solution {
public:
    int climbStairs(int n) {

        if(n == 0){
            return(0);
        }

        if(n == 1) {
            return(1);
        }

        if(n == 2){
            return(2);
        }

        return(climbStairs(n-1) + climbStairs(n-2));
    }
};

Optimised solution (time complexity O(n))(calcs from base case bulding up):

class Solution {
public:
    int climbStairs(int n) {

        if(n <= 2){
            return(n);
        }

        //initialise for base case 3
        int ans = 0;
        int back_one = 2;
        int back_two = 1;

        for(int i=2; i<n; i++){
            ans = back_one + back_two;
            back_two = back_one;
            back_one = ans;
        }

        return(ans);
    }
};