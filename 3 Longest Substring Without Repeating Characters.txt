3. Longest Substring Without Repeating Characters

IDENTIFY: SLIDING WINDOW, MAP

Medium

Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

Initial solution using bitmask:

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        std::bitset<256> mask;
        int count = 0;
        int max = 0;

        for(int i = 0; i < s.length(); i++){
            for(int ii = i; ii < s.length(); ii++){

            if( hasSeenCharacter(s[ii], mask) ){
                    break;
                } else {
                    count = count + 1;
                    recordCharacter(s[ii], mask);
                }
            }

            if(count > max){
                max = count;
            }
            count = 0;
            mask = 0;
        }

        return(max);

    }

    bool hasSeenCharacter(char character, std::bitset<256>& mask) {
        return mask.test(static_cast<unsigned char>(character));
    }

    void recordCharacter(char character, std::bitset<256>& mask) {
        mask.set(static_cast<unsigned char>(character));
    }

};

Improved solution sliding window + map:

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        if(s.length()==0){
            return(0);
        }

        unordered_map<char, int> m;

        int i = 0;
        int j = 0;
        int ans = INT_MIN;

        while( j<s.length() ){
            m[s[j]]++;

            if(m.size()==j-i+1){
                ans = max(ans,j-i+1);

            } else if(m.size()<j-i+1){
                while(m.size()<j-i+1){
                    m[s[i]]--;
                    if(m[s[i]]==0) {
                        m.erase(s[i]);
                    }
                    i++;
                }
                
            }
            j++;
        }

        return(ans);

    }

};